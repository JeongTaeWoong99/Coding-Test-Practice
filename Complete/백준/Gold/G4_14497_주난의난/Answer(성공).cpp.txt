// 배열 크기 N M (1 ≤ N, M ≤ 300)
// * = 주난이의 y x 위치
// # = 범인 y x 위치
// 0 = 이동가능
// 1 = 이동불가
// 상하좌우 탐색 = BFS
#include<bits/stdc++.h>
using namespace std;

int  N, M;                              // 맵 크기
int  startY, startX, arriveY, arriveX;  // 주난이 시작 YX, 범인 YX
char a[304][304];                       // 배열 (0, 1, *, #)
int  visited[304][304];                 // 방문 체크 배열
int  moveCount = 0;

queue<pair<int, int>> currentQ, nextQ;  // 현재 큐, 다음 큐
int dy[] = {-1, 1, 0, 0};
int dx[] = {0, 0, -1, 1};

int main(int argc, char* argv[])
{
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    // 크기 Y X 입력
    cin >> N >> M;

    // 주난이 위치 (1 - based → 0 - based)
    cin >> startY >> startX;
    startY--;
    startX--;

    // 범인 위치 (1 - based → 0 - based)
    cin >> arriveY >> arriveX;
    arriveY--;
    arriveX--;

    // 배열 초기화
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            cin >> a[i][j];
        }
    }

    // 핵심 로직
    // 주난이 위치에서 탐색 시작
    currentQ.push({startY, startX});
    visited[startY][startX] = 1;

    // 범인을 찾을 때까지 반복
    while (!currentQ.empty() || !nextQ.empty())
    {
        // 현재 큐가 비었으면, 다음 큐로 교체하고 점프 카운트 증가
        if (currentQ.empty())
        {
            currentQ = nextQ;
            while (!nextQ.empty()) // nq 초기화
                nextQ.pop();
            moveCount++;
        }

        int y = currentQ.front().first;
        int x = currentQ.front().second;
        currentQ.pop();

        // 범인 도착 확인
        if (y == arriveY && x == arriveX)
        {
            cout << moveCount << "\n";
            return 0;
        }
        
        // 상하좌우 탐색
        for (int i = 0; i < 4; i++)
        {
            int ny = y + dy[i];
            int nx = x + dx[i];

            // 범위 체크
            if (ny < 0 || ny >= N || nx < 0 || nx >= M) continue;
            // 방문 체크
            if (visited[ny][nx]) continue;

            visited[ny][nx] = 1;

            // 0을 만나면, 현재 큐에 추가 (같은 점프 내에서 계속 퍼짐)
            if (a[ny][nx] == '0' || a[ny][nx] == '*')
            {
                currentQ.push({ny, nx});
            }
            // 1을 만나거나 #을 만나면, 다음 큐에 추가 (다음 점프)
            else
            {
                nextQ.push({ny, nx});
            }
        }
    }

    return 0;
}