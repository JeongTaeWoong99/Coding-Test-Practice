#include <bits/stdc++.h>
using namespace std;

typedef unsigned long long long_t;

// 백준 1016번 : 제곱 ㄴㄴ 수 (Gold 1)
//
// 문제 요약 :
// - 제곱ㄴㄴ수 : 1보다 큰 제곱수(4, 9, 16, 25, ...)로 나누어떨어지지 않는 수
// - min ~ max 범위에서 제곱ㄴㄴ수의 개수를 구하기
//
// 입력 :
// - min, max (1 ≤ min ≤ 10^12, min ≤ max ≤ min + 10^6)
//
// 출력 :
// - 제곱ㄴㄴ수의 개수
//
// 알고리즘 :
// - 에라토스테네스의 체 응용
// - 제곱수로 나누어떨어지는 수들을 걸러내기

// start ~ end 범위에서 제곱ㄴㄴ수의 개수를 구하는 함수
// start : 시작 범위 (min)
// end : 끝 범위 (max)
int solve(long_t start, long_t end)
{
    // sieve[i] = true이면 (start+i)는 제곱ㄴㄴ수
    // 처음에는 모든 수가 제곱ㄴㄴ수라고 가정
    vector<bool> sieve(end - start + 1, true);

    // k^2 형태의 제곱수들을 체크 (2^2, 3^2, 4^2, ...)
    // k^2이 end보다 크면 더 이상 체크할 필요 없음
    for (long_t k = 2; k * k <= end; k++)
    {
        long_t s = k * k;                        // 현재 제곱수 (4, 9, 16, 25, ...)
        long_t i = (s - (start % s)) % s;        // start ~ end 범위에서 s의 첫 배수 위치

        // s의 배수들을 모두 false로 마킹 (제곱수로 나누어떨어지므로 제곱ㄴㄴ수가 아님)
        for (long_t j = i; j < sieve.size(); j += s)
            sieve[j] = false;
    }

    // true로 남아있는 개수 세기 (제곱ㄴㄴ수의 개수)
    int cnt = 0;
    for (int i = 0; i < sieve.size(); i++)
        if (sieve[i]) cnt++;

    return cnt;
}

int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    long_t start, end;
    cin >> start >> end;

    cout << solve(start, end);

    return 0;
}
